import sys
import IPython
import numpy as np
import pprint as pp
import sklearn
import matplotlib.pyplot as plt
from IPython.display import display
import random
from copy import deepcopy
from sklearn.datasets import load_digits

""" Load Digit Data """
digits = load_digits()
x, y = digits.data, digits.target
# plt.gray()
# plt.matshow(digits.images[1])
# plt.show()
""" Split Data & Get 50 / Class """
indextrain = []
for i in range(0, 10):
    foo_indexes = [n for n, x in enumerate(digits.target) if x == i]
    f = foo_indexes[0:50]
    indextrain = indextrain + f
xtrain, ytrain, xtest, ytest = [], [], [], []
for index in indextrain:
    xtrain.append(digits.data[index])
    ytrain.append(digits.target[index])
c = list(zip(xtrain, ytrain))
xtrain, ytrain = zip(*c)
random.shuffle(c)
xtest = [digits.data[i]
         for i in range(0, len(digits.data)) if i not in indextrain]
ytest = [digits.target[i]
         for i in range(0, len(digits.target)) if i not in indextrain]

""" Init Network """
def init_network(inputlayer, hiddenlayer, outputlayer):
    network = {}
    network['bobot_w'] = [[random.uniform(0.0, 0.001) for i in range(
        inputlayer + 1)] for i in range(hiddenlayer)]
    network['bobot_v'] = [[random.uniform(0.0, 0.001) for i in range(
        hiddenlayer + 1)] for i in range(outputlayer)]
    return network

""" One Hot Encoding """
def onehotouput(ytarget, size=10):
    res = [0] * size
    res[size - ytarget - 1] = 1
    return res

""" Sigmoid Function """
def aktivasi(nilainet):
    return 1.0 / (1.0 + np.exp(-nilainet))

""" ff = FEEDFORWARD PROSES """

""" Compute NetInput Y & Return The Activation Result """
def ffInputHidden(xdata, bobotw):
    y = [1]
    for bobot in bobotw:
        netinput = 0
        for i in range(0, len(xdata)):
            netinput = netinput + (bobot[i] * xdata[i])
        nety = aktivasi(netinput)
        y.append(nety)
    return y


""" Compute NetInput O & Return The Activation Result """
def ffHiddenOuput(ydata, bobotv):
    ok = []
    for bobot in bobotv:
        netinput = 0
        for i in range(0, len(ydata)):
            netinput = netinput + (bobot[i] * ydata[i])
        netok = aktivasi(netinput)
        ok.append(netok)
    return ok


""" bw = Backward Proses """

""" Compute DeltaVJK For New V Weight """
def bwOuputHidden(y, bobotv, dataok, target, lrate):
    datadeltaok = []
    for i in range(0, len(bobotv)):
        bobot = bobotv[i]
        delok = (target[i] - dataok[i]) * (1 - dataok[i]) * dataok[i]
        datadeltaok.append(delok)
        for j in range(0, len(bobot)):
            deltavjk = bobot[j] + (lrate * delok * y[j])
            bobotv[i][j] = deltavjk
    return datadeltaok, bobotv


""" Compute DeltaW For New W Weight """
def bwHiddenInput(x, y, bobotw, datadeltaok, tempbobotv, lrate):
    for i in range(0, len(bobotw)):
        bobot = bobotw[i]
        hasildely = 0
        for j in range(0, len(datadeltaok)):
            hasildely = hasildely + (datadeltaok[j] * tempbobotv[j][i + 1])
        for k in range(0, len(bobot)):
            tes = lrate * (1 - y[i + 1]) * y[i + 1] * hasildely * x[k]
            deltaw = bobot[k] + tes
            bobotw[i][k] = deltaw
    return bobotw


""" Init Epoch,Input,Output,Hiddden,LRate """
jumlahepoch = 400
inputlayer = 64
hiddenlayer = 4
outputlayer = 10
lrate = 0.05

""" Create Network 64+(1),4+(1),10 """
network = init_network(inputlayer, hiddenlayer, outputlayer)

tempbobotw = deepcopy(network['bobot_w'])
ydata = []
odata = []
print("Wait - Training")
# for epoch in range(1, jumlahepoch + 1):
#     for iterasi in range(0, len(xtrain)):
#         xdata = list(xtrain[iterasi])
#         xdata.insert(0, 1)
#         ytarget = ytrain[iterasi]
#         target = onehotouput(ytarget)
#
#         """ Feed Forward """
#         ydata = ffInputHidden(xdata, network['bobot_w'])
#         odata = ffHiddenOuput(ydata, network['bobot_v'])
#
#         """ Backward """
#         tempbobotv = deepcopy(network['bobot_v'])
#         datadeltaok, network['bobot_v'] = bwOuputHidden(
#             ydata, network['bobot_v'], odata, target, lrate)
#         network['bobot_w'] = bwHiddenInput(
#             xdata, ydata, network['bobot_w'], datadeltaok, tempbobotv, lrate)
#
#     if epoch % 100 == 0:
#         print("Epoch Ke = " + str(epoch) + " Selesai")
print()
print("New Weigh After Training")
network['bobot_w'] = [[0.027503296130122062,
  0.00023126039060621472,
  -0.12133987867381436,
  -0.5045986892060051,
  0.3908410090921738,
  0.10565758528535377,
  -0.07686316808125569,
  -0.22902592317547488,
  0.12267156262834794,
  -0.00019781440117719133,
  -0.2794206027834973,
  -0.39879185744363627,
  0.014998566867899816,
  -0.09525342164964413,
  0.002832932837404212,
  0.263519747497821,
  0.08292192715800106,
  0.0006576447321612359,
  -0.3440715061444159,
  -0.14417498231295678,
  0.021171983233844862,
  0.4215792582094969,
  1.0680411036689839,
  0.4520120465234674,
  0.011910157596817543,
  0.0005158509759450261,
  -0.5158256749173332,
  -0.44106291617191495,
  -0.1914466938805061,
  -0.037268676447062735,
  0.8213306884587729,
  0.31899444673675686,
  0.0006312495794585696,
  0.000380892128091782,
  0.1275181361148823,
  0.05283689818478255,
  0.08246301774519438,
  0.14875821254773702,
  0.007883710231485002,
  0.15197314197683842,
  0.00047304124826373764,
  0.00010814608008669036,
  0.17371500005415874,
  0.9092548555267405,
  0.6252135796168917,
  0.08909852564964987,
  -0.1065727392244588,
  0.14265780722933002,
  0.0019838908946357018,
  0.0004234130661256641,
  -0.11239462040064233,
  0.21975189051426827,
  0.135440396084547,
  -0.08703967827675742,
  0.027690998545427257,
  0.4859140281476542,
  0.010473226644620266,
  6.9662811893902e-05,
  -0.058824279159886965,
  -0.4574610770304134,
  -0.19356819777344042,
  0.31169368994599006,
  0.4926461237104314,
  0.4678853116369614,
  0.008369298088081727],
 [0.03015302760485754,
  0.0005913912900602838,
  0.04349783503730712,
  0.5207585249865598,
  0.1888568756599051,
  0.020703334811414745,
  0.017525995508339578,
  0.04470306195810539,
  0.025966889380111387,
  0.0006581726873900475,
  0.3530208299530948,
  0.24888716006214467,
  -0.09649354836018635,
  0.2301083393706208,
  0.2847909168836714,
  0.13065580982597066,
  0.018692927949449496,
  0.0009884606546944146,
  0.4410574031606912,
  -0.21212957574393834,
  0.0454169241532052,
  0.7457416975073584,
  1.1993885986859079,
  0.31366254160216694,
  0.003965553334398399,
  0.0002385952602417559,
  0.14317772580339289,
  -0.20827912027618406,
  0.2599126414310152,
  0.3530404659445203,
  0.5211647611687473,
  0.5520273356900535,
  0.0001621485289873863,
  0.0008385499665565754,
  0.12822427829171326,
  -0.3802429001874972,
  -0.4006245404306627,
  -0.06571108009324655,
  -0.1327547914825138,
  0.33835630285408497,
  0.00096165597791954,
  0.0005804109114556545,
  0.23381650072184743,
  -0.23411895282747983,
  -0.03829936222171949,
  0.44453869525641226,
  -0.09573103723347846,
  -0.4370114979021158,
  0.0004733293760075939,
  0.00011581458720826166,
  0.017632146512318574,
  -0.056596205222285506,
  -0.6691305936556138,
  0.15770803367752712,
  -0.36554975672558176,
  -0.4117308577626742,
  -0.029593029843684504,
  8.841154457259781e-05,
  0.01933389404437725,
  0.5061351509039967,
  0.4309719450414988,
  0.2825693004309818,
  -0.48867474330000543,
  -0.07409540470375418,
  0.020498792409468322],
 [0.028948286506779965,
  0.00021020284899464958,
  0.08853646626614502,
  0.07208081600843835,
  0.09070129877572967,
  0.3583619548896061,
  -0.3016808451375708,
  -0.6288212524356619,
  -0.29882436763041165,
  0.0005045084653525662,
  -0.0019208005342408324,
  0.056799247585079725,
  -0.29082759469661396,
  -0.9559577691790876,
  -0.13108575333769365,
  -0.4081465784206636,
  -0.21748315934160214,
  0.00030226889744254705,
  0.36143706481127397,
  0.8177637186196297,
  0.592615023993886,
  -0.09071752113574465,
  -0.01154825701703548,
  -0.11273941946695089,
  -0.04630161572252394,
  0.00016806319602009282,
  0.5783540818617688,
  0.4022772388300236,
  0.9283424365111738,
  0.2118153078395947,
  -0.1978349778495035,
  -0.5728978026343452,
  0.00010874654741086676,
  0.0001485386177657193,
  -0.16737713578648658,
  -0.7088193860116366,
  -0.24467194271711915,
  -0.0682399167091418,
  -0.4138604833056964,
  -0.7494403996539718,
  0.00032196520901455226,
  0.0005244108340123692,
  0.2336744990343326,
  0.47018662834763575,
  -0.15575313233793195,
  -0.0015398361652961923,
  0.15922011212503578,
  0.019994967083021856,
  0.00039821696397821356,
  8.76118034804182e-05,
  0.07470146093948957,
  0.3781905075550372,
  -0.3728253269375236,
  0.636846233493895,
  0.9729788814375541,
  0.15208226719885126,
  0.0019462897491960068,
  3.8305480442665354e-05,
  0.09898139311131403,
  0.10994015810834888,
  0.2924077937205409,
  0.7256892376664782,
  0.9121411493281429,
  0.20265369468595198,
  0.0014221335906744955],
 [0.006135304953446616,
  0.0005349265605308991,
  0.026590135315461515,
  0.23092436262086544,
  0.1591628251733404,
  0.00014823350123409316,
  0.28726837226142843,
  0.11679506864447901,
  0.010108351036390262,
  0.004257819384759651,
  0.1137044373084319,
  0.2234149805885889,
  0.04072480280339086,
  0.1274936863316545,
  0.4746053266212406,
  0.044017845929439206,
  0.006368889797835319,
  0.00033360033659486155,
  -0.12199878502151665,
  -0.012338451216797141,
  -0.09007841230528196,
  -0.10497528390212123,
  0.15927600531210995,
  -0.06973152907858322,
  -0.00016255318622367327,
  -0.016361879254040528,
  -0.11979177809438167,
  0.01774249937139987,
  0.2619405269126766,
  0.07233063977674667,
  -0.21887226422670258,
  -0.15420627833340753,
  0.0002629202734158377,
  0.00020606663667904014,
  -0.19560261068208176,
  -0.1534348003845223,
  -0.030402279037482247,
  -0.02818517652339409,
  -0.21330342156640034,
  -0.024660042138452583,
  0.000629084645910698,
  0.0001906760208672307,
  -0.15698105650065733,
  -0.07561510475650211,
  -0.29211812898332296,
  -0.19070350387324483,
  -0.0677562878085767,
  -0.018282897220841348,
  7.424925105268054e-05,
  0.0001668554077154466,
  -0.024235089348143196,
  0.11899340974784679,
  0.27317264396156093,
  -0.057497861362339336,
  0.18755497764503762,
  0.16696101148936396,
  0.01679296217310229,
  0.00030022127328997717,
  0.01940306483323277,
  0.16825183802723892,
  0.18067296388226922,
  -0.11766800808008059,
  0.3385343700935228,
  0.07278458969988685,
  -0.0011199101335383742]]
network['bobot_v'] = [[-2.3994898774493754,
  0.2503027931723004,
  0.252347417908203,
  0.21834339409141987,
  0.286863968324486],
 [-2.3330323857095663,
  0.15043361275782022,
  0.15040940325941007,
  0.1300719717493275,
  0.1627877020709614],
 [0.7528496989803564,
  0.7535513661457588,
  0.7585700790738282,
  -6.988390824367215,
  0.7529524971168868],
 [0.14301041730579472,
  0.3613279752874914,
  -6.679277897889875,
  2.0399445517878187,
  0.2582997595165228],
 [-0.34134872209423567,
  -6.316332093617873,
  1.4281327610642747,
  1.6467974088923432,
  -0.02974197084670467],
 [-1.4446353170025363,
  1.2842757560570548,
  1.2830718772497007,
  1.2655109283494355,
  -5.8352407518416864],
 [-3.9256930536201518,
  0.4995244410789324,
  0.4249959914529162,
  0.31925045978154637,
  0.6486981266807172],
 [-3.4535652213337595,
  0.3222436378100508,
  0.28035070929955574,
  0.20670718568498914,
  0.4188919707012495],
 [-3.0809373022626128,
  0.1904636859014206,
  0.16780880911359372,
  0.11341707147320433,
  0.23280422186416297],
 [-2.833542860678366,
  0.08961815967846228,
  0.07991739782802833,
  0.03965951640813533,
  0.1329793206897327]]



print(" --- Training Completed --- ")
""" Testing """
print()
print(" --- Do Testing --- ")
benar = 0
salah = 0
for i in range(1, 2):
    xdata = list(xtrain[i])
    xdata.insert(0, 1)
    ytarget = ytrain[i]
    plt.gray()
    plt.matshow(digits.images[i])
    plt.show()
    output = onehotouput(ytarget)
    ydata = ffInputHidden(xdata, network['bobot_w'])
    odata = ffHiddenOuput(ydata, network['bobot_v'])
    max_index = odata.index(max(odata))
    result = [0] * 10
    result[max_index] = 1
    if output == result:
        print("Kelas", max_index)
        benar = benar + 1
    else:
        print("Kelas | Salah", max_index)
        salah = salah + 1

prosentase = float("{0:.3f}".format((benar / (benar + salah)) * 100))
print("Total Benar: " + str(benar))
print("Total Salah: " + str(salah))
print("Presentase : " + str(prosentase) + " %")
